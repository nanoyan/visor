{
  "$id": "coding-scheme@iqb-standard@3.2",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Coding Scheme",
  "description": "Data structure to specify all processing steps of response data in order to get coded and scored data for analyses.",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "description": "Major and minor of the version of the data structure.",
      "pattern": "^\\d+\\.\\d+$",
      "examples": ["3.5", "4.10"]
    },
    "variableCodings": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for the variable. In case of a scheme for a base variable, this id is identical with the source variable's id. All ids of a response scheme should be unique.",
            "pattern": "^[0-9a-zA-Z_]+$"
          },
          "alias": {
            "type": "string",
            "description": "Alternative identifier for the variable. In case of a scheme for a base variable, this id is identical with the source variable's alternative id. All alternative ids of a response scheme should be unique.",
            "pattern": "^[0-9a-zA-Z_]+$"
          },
          "label": {
            "type": "string",
            "description": "Some additional info for UI"
          },
          "sourceType": {
            "type": "string",
            "description": "Specifies how to derive (concatenate, check uniqueness, sum code etc.).",
            "enum": [
              "BASE",
              "BASE_NO_VALUE",
              "MANUAL",
              "COPY_VALUE",
              "CONCAT_CODE",
              "SUM_CODE",
              "SUM_SCORE",
              "UNIQUE_VALUES",
              "SOLVER"
            ]
          },
          "sourceParameters": {
            "type": "object",
            "description": "Parameters to specify the derive method",
            "properties": {
              "solverExpression": {
                "type": "string",
                "description": "If sourceType 'solver', this expression is evaluated when deriving. Placeholder for variables are in curly brakes.",
                "examples": [
                  "${01}*${03}-100"
                ]
              },
              "processing": {
                "type": "array",
                "description": "Some options to change value or status",
                "items": {
                  "type": "string",
                  "enum": [
                    "TO_LOWER_CASE",
                    "TO_NUMBER",
                    "REMOVE_ALL_SPACES",
                    "REMOVE_DISPENSABLE_SPACES",
                    "TAKE_DISPLAYED_AS_VALUE_CHANGED",
                    "TAKE_EMPTY_AS_VALID",
                    "SORT"
                  ]
                }
              }
            }
          },
          "deriveSources": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-zA-Z_]+$"
            }
          },
          "processing": {
            "type": "array",
            "description": "This parameter defines what (pre)processing should be done.",
            "items": {
              "type": "string",
              "enum": [
                "IGNORE_CASE",
                "IGNORE_ALL_SPACES",
                "IGNORE_DISPENSABLE_SPACES",
                "SORT_ARRAY",
                "REPLAY_REQUIRED",
                "ATTACHMENT"
              ]
            }
          },
          "fragmenting": {
            "type": "string",
            "description": "Regular expression to get fragments out of the value if of type string"
          },
          "manualInstruction": {
            "type": "string",
            "description": "Instructions for manual coding."
          },
          "codeModel": {
            "type": "string",
            "enum": [
              "MANUAL_AND_RULES",
              "RULES_ONLY",
              "MANUAL_ONLY"
            ],
            "description": "Info for applications to simplify UI"
          },
          "page": {
            "type": "string",
            "description": "If the unit supports paging, this property defines the page to be presented to the coder if manually coded."
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "INVALID",
                        "INTENDED_INCOMPLETE"
                      ]
                    }
                  ],
                  "description": "If this code's rules/instructions match, the code and score is taken for the response. If the code id is of type 'string', the status 'INVALID' or 'INTENDED_INCOMPLETE' will be set."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "UNSET",
                    "FULL_CREDIT",
                    "PARTIAL_CREDIT",
                    "TO_CHECK",
                    "NO_CREDIT",
                    "RESIDUAL",
                    "RESIDUAL_AUTO",
                    "INTENDED_INCOMPLETE"
                  ],
                  "description": "To ease some processing and documentation"
                },
                "label": {
                  "type": "string"
                },
                "score": {
                  "type": "integer"
                },
                "manualInstruction": {
                  "type": "string",
                  "description": "Instructions for manual coding."
                },
                "ruleSetOperatorAnd": {
                  "type": "boolean",
                  "description": "If true, all rule sets must match to take that code. Otherwise (default: false), one matching rule set will satisfy."
                },
                "ruleSets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "valueArrayPos": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "Refers to a specific position in the value array [0..n-1]."
                          },
                          {
                            "type": "string",
                            "description": "Refers to any position in the value array, to the sum of all array values or the length of the value array.",
                            "enum": [
                              "ANY",
                              "ANY_OPEN",
                              "SUM",
                              "LENGTH"
                            ]
                          }
                        ]
                      },
                      "ruleOperatorAnd": {
                        "type": "boolean",
                        "description": "If true, all rules must match to take that code. Otherwise (default: false), one matching rule will satisfy."
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fragment": {
                              "type": "integer",
                              "description": "Refers to a specific fragment of the value [0..n-1] or to any -1."
                            },
                            "method": {
                              "type": "string",
                              "description": "Condition for evaluation",
                              "enum": [
                                "MATCH",
                                "MATCH_REGEX",
                                "NUMERIC_MATCH",
                                "NUMERIC_RANGE",
                                "NUMERIC_LESS_THAN",
                                "NUMERIC_MORE_THAN",
                                "NUMERIC_MAX",
                                "NUMERIC_MIN",
                                "IS_EMPTY",
                                "IS_NULL",
                                "IS_TRUE",
                                "IS_FALSE"
                              ]
                            },
                            "parameters": {
                              "type": "array",
                              "description": "Depending on the method, additional parameter(s) is needed. See separate documentation",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "method"
                          ]
                        }
                      }
                    },
                    "required": [
                      "rules"
                    ]
                  }
                }
              },
              "required": [
                "id"
              ]
            }
          }
        },
        "required": [
          "id",
          "sourceType"
        ]
      }
    }
  },
  "required": [
    "version",
    "variables"
  ]
}
